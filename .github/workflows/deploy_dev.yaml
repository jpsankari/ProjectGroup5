name: Full DEV Deployment

run-name: ${{ github.actor }} is testing out GitHub Actions ðŸš€

on:
  workflow_dispatch:

#on: 
 # push:
  #  branches:
   #   - main



permissions:
  id-token: write      # <- This is required for OIDC
  contents: read

jobs:
  CI:
    runs-on: ubuntu-latest
    #needs:  snyk-scan
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: List Files for Debugging
        run: ls -la
        # This will help you confirm that the directory structure is as expected
    
      - name: List Env Directory Contents for Debugging
        run: ls -la ./envs/dev
        # This will show if the envs/dev directory exists

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::255945442255:role/sankari-github-oidc-deploy-role
          aws-region: ap-southeast-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform fmt
        run: terraform fmt --recursive
        working-directory: './envs/dev'
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.5.7' # or latest stable
    
      - name: Terraform Init
        run: terraform init
        working-directory: './envs/dev'
    
      - name: Terraform Validate
        run: terraform validate -no-color
        working-directory: './envs/dev'

      - name: Terraform Plan
        run: terraform plan
        working-directory: './envs/dev'
     
 # snyk-scan:
  #  runs-on: ubuntu-latest
   # steps:
    #  - uses: actions/checkout@v3

#      - name: Install Snyk CLI
 #       run: npm install -g snyk

  #    - name: Authenticate with Snyk
   #     run: snyk auth ${{ secrets.SNYK_TOKEN }}

    #  - name: Scan Terraform IaC
     #   run: |
      #    cd modules
       #   snyk iac test --severity-threshold=critical
        #continue-on-error: true
        #shell: bash

      #- name: Set up Python (for Python Lambdas)
       # uses: actions/setup-python@v5
        #with:
         # python-version: '3.11' 

      #- name: Run Snyk Test (Python)
       # run: |
        #  if [ -f requirements.txt ]; then
         #   pip install -r requirements.txt
          #  snyk test --file=requirements.txt --package-manager=pip --severity-threshold=critical
          #else
           # echo "No requirements.txt found. Skipping Snyk Python scan."
          #fi



  
  integration-tests:
    runs-on: ubuntu-latest
    needs: CD
    steps:
      - uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest

      - name: Run Integration Tests
        run: bash scripts/run-integration-tests.sh | tee -a result.log

      - name: Upload test summary
        uses: actions/upload-artifact@v4
        with:
          name: integration-results
          path: result.log

  CD:
    runs-on: ubuntu-latest
    needs: CI
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::255945442255:role/sankari-github-oidc-deploy-role
          aws-region: ap-southeast-1


      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false
    
      - name: Terraform Init
        run: terraform init 
        working-directory: './envs/dev'

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: './envs/dev'

      - name: Export Terraform Outputs
        id: tfout
        shell: bash
        run: |
          echo "CF_ID=$(terraform output -raw cf_id)" >> $GITHUB_ENV
          echo "S3_NAME=$(terraform output -raw bucket_name)" >> $GITHUB_ENV
          echo "CF_DOMAIN=$(terraform output -raw cf_domain)" >> $GITHUB_ENV
          echo "API_ENDPOINT=$(terraform output -raw api_endpoint)" >> $GITHUB_ENV

        working-directory: './envs/dev'

      - name: Replace API Endpoint in index.html
        run: |
         sed -i "s|{{API_ENDPOINT}}|${{ env.API_ENDPOINT }}|g" ./static-website/index.html

      - name: S3 Deployment
        run: aws s3 sync . s3://${{ env.S3_NAME }}
        working-directory: ./static-website

      - name: Invalidate cache
        run: aws cloudfront create-invalidation --distribution-id ${{ env.CF_ID }} --paths "/*"

      - name: Output CF domain

        run: echo "${{ env.CF_DOMAIN }}"


  approval:
    runs-on: ubuntu-latest
    needs: integration-tests
    permissions:
      issues: write
    timeout-minutes: 1440
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: integration-results

      - name: Print integration test results
        run: cat result.log

      - name: Manual Approval
        uses: trstringer/manual-approval@v1.9.1
        with:
          secret: ${{ secrets.GITHUB_TOKEN }}
          #approvers: laoniu-meow,sandhyakaranam88,cathyloi,johnboscos,jpsankari
          approvers: jpsankari
          minimum-approvals: 1
          issue-title: "ðŸš¦ Please approve to deploy UAT environment before production."
          issue-body: |
            âœ… Integration tests passed.

            Please review the logs above.
            Reply with **approve** to continue, or **deny** to stop.
  


   





