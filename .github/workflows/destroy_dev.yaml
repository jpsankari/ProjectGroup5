name: Terraform Destroy DEV

on:
  workflow_dispatch:
    inputs:
      confirm:
        description: "Type 'DESTROY' to confirm Terraform destroy"
        required: true

env:
  AWS_REGION: ap-southeast-1

permissions:
  id-token: write
  contents: read

jobs:
  Destroy:
    runs-on: ubuntu-latest

    steps:
      - name: Confirm Destroy
        if: ${{ github.event.inputs.confirm != 'DESTROY' }}
        run: |
          echo "❌ Confirmation failed. Type 'DESTROY' to proceed."
          exit 1

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::255945442255:role/sankari-github-oidc-deploy-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.8.2
          terraform_wrapper: false

      - name: Terraform Init
        run: terraform init -input=false
        working-directory: ./envs/dev

      - name: Export API & Bucket Info
        id: tf_outputs
        run: |
          echo "api_url=$(terraform output -raw api_endpoint || echo '')" >> $GITHUB_OUTPUT
          echo "bucket_name=$(terraform output -raw bucket_name || echo '')" >> $GITHUB_OUTPUT
        working-directory: ./envs/dev

      - name: Empty S3 Bucket (if exists)
        if: ${{ steps.tf_outputs.outputs.bucket_name != '' }}
        run: |
          echo "Emptying S3 Bucket: $BUCKET_NAME"
          aws s3 rm s3://${{ steps.tf_outputs.outputs.bucket_name }} --recursive || echo "Bucket may be empty"

      - name: Detach IAM Policies
        run: |
          ROLE_NAME="lambda_exec_role_dev"
          for POLICY in \
            arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess \
            arn:aws:iam::aws:policy/AWSLambda_FullAccess \
            arn:aws:iam::aws:policy/service-role/AmazonS3ObjectLambdaExecutionRolePolicy \
            arn:aws:iam::255945442255:policy/lambda_ses_policy_dev; do
            aws iam detach-role-policy --role-name $ROLE_NAME --policy-arn $POLICY || true
          done

      - name: Get API URL from Terraform output
        run: |
            API_URL="https://baxhhwdly2.execute-api.ap-southeast-1.amazonaws.com/dev"
            if [ -n "$API_URL" ]; then
              echo "API_URL=$API_URL" >> $GITHUB_ENV
            else
              echo "API URL output not found"
              exit 1
            fi

      - name: Extract REST API ID and Stage from API URL
        id: extract
        run: |
          REST_API_ID=$(echo "$API_URL" | sed -E 's|https://([^.]*)\..*|\1|')
          STAGE_NAME=$(echo "$API_URL" | awk -F/ '{print $NF}')
          echo "REST_API_ID=$REST_API_ID" >> $GITHUB_ENV
          echo "STAGE_NAME=$STAGE_NAME" >> $GITHUB_ENV

      - name: Destroy API Gateway
        run: |
          echo "Deleting Stage $STAGE_NAME from API $REST_API_ID"
          aws apigateway delete-stage --rest-api-id "$REST_API_ID" --stage-name "$STAGE_NAME" || echo "Stage not found or already deleted"

          DEPLOYMENTS=$(aws apigateway get-deployments --rest-api-id "$REST_API_ID" --query 'items[].id' --output text)
          if [ -n "$DEPLOYMENTS" ]; then
            echo "$DEPLOYMENTS" | xargs -n1 -I{} aws apigateway delete-deployment --rest-api-id "$REST_API_ID" --deployment-id {}
          else
            echo "No deployments found"
          fi

          echo "Deleting REST API $REST_API_ID"
          aws apigateway delete-rest-api --rest-api-id "$REST_API_ID" || echo "REST API deletion skipped"

      - name: Terraform Destroy
        run: |
          export TF_LOG=TRACE
          export TF_LOG_PATH=terraform_destroy.log
          terraform destroy -auto-approve
        working-directory: ./envs/dev

      - name: Upload Destroy Logs (if failed)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: terraform-destroy-logs
          path: ./envs/dev/terraform_destroy.log
          if-no-files-found: ignore

