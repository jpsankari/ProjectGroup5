name: Terraform Destroy DEV

on:
  workflow_dispatch

env:
  AWS_REGION: ap-southeast-1

permissions:
  id-token: write
  contents: read

jobs:
  Destroy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::255945442255:role/sankari-github-oidc-deploy-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.8.2
          terraform_wrapper: false

      - name: Terraform Init
        run: terraform init -input=false
        working-directory: ./envs/dev

      - name: Export Bucket Name (if exists)
        id: bucket
        run: |
          terraform output -raw bucket_name > bucket_name.txt || echo "" > bucket_name.txt
          echo "BUCKET_NAME=$(cat bucket_name.txt)" >> $GITHUB_ENV
        working-directory: ./envs/dev

      - name: Empty S3 Bucket (if exists)
        if: env.BUCKET_NAME != ''
        run: |
          echo "Emptying S3 bucket: $BUCKET_NAME"
          aws s3 rm s3://$BUCKET_NAME --recursive || echo "Bucket may already be deleted or empty."
        env:
          BUCKET_NAME: ${{ env.BUCKET_NAME }}

      - name: Detach IAM Policies
        run: |
          ROLE_NAME="lambda_exec_role_dev"
          POLICIES=(
            "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"
            "arn:aws:iam::aws:policy/AWSLambda_FullAccess"
            "arn:aws:iam::aws:policy/service-role/AmazonS3ObjectLambdaExecutionRolePolicy"
            "arn:aws:iam::255945442255:policy/lambda_ses_policy_dev"
          )
          for P in "${POLICIES[@]}"; do
            echo "Detaching $P from $ROLE_NAME"
            aws iam detach-role-policy --role-name $ROLE_NAME --policy-arn $P || echo "Already detached"
          done

      - name: API Gateway â€“ Remove Stage or Deployment Workaround
        run: |
          # Attempt manual cleanup to ensure API can be destroyed
          REST_API_ID=$(terraform output -raw api_endpoint | sed -E 's|https://([^/]+)/.*|\1|')
          echo "Identified REST API ID: $REST_API_ID"
          aws apigateway delete-stage --rest-api-id "$REST_API_ID" --stage-name dev || echo "Stage 'dev' may already be deleted"
        working-directory: ./envs/dev

      - name: Terraform Destroy
        run: |
          export TF_LOG=TRACE
          export TF_LOG_PATH=terraform_destroy.log
          terraform destroy -auto-approve
        working-directory: ./envs/dev

      - name: Upload Destroy Logs (if failed)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: terraform-destroy-logs
          path: ./envs/dev/terraform_destroy.log
